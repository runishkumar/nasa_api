<?php
namespace NasaApiBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * NeoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NeoRepository extends EntityRepository
{

    public function getMaxSpeed($isHazardous=false)
    {
        $qb = $this->createQueryBuilder('n');
        $query = $qb->select('max(n.speed) speed')
            ->where('n.isHazardous = :isHazardous')
            ->groupBy('n.isHazardous')
            ->setMaxResults(1)
            ->getQuery();

        $maxSpeed = $query
            ->setParameter('isHazardous', $isHazardous)
            ->getOneOrNullResult();

        return $maxSpeed ? $maxSpeed['speed'] : null;
    }

    public function findFastest($isHazardous=false)
    {
        $maxSpeed = $this->getMaxSpeed($isHazardous);

        $qb = $this->createQueryBuilder('n');
        $query = $qb->select('n')
            ->where('n.isHazardous = :isHazardous')
            ->andWhere('n.speed = :speed')
            ->setMaxResults(1)
            ->getQuery();

        return $query
            ->setParameter('isHazardous', $isHazardous)
            ->setParameter('speed', $maxSpeed)
            ->getOneOrNullResult();
    }

    public function findBestYear($isHazardous=false)
    {
        $sql = "SELECT year, max(cnt) maxCount FROM (
                    SELECT YEAR(date) as year, count(id) as cnt
                    FROM neo
                    WHERE is_hazardous=:isHazardous
                    GROUP BY YEAR(date)
                ) y
                GROUP BY year";

        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('year', 'year');
        $rsm->addScalarResult('maxCount', 'maxCount');

        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);

        $result = $query
            ->setParameter('isHazardous', $isHazardous)
            ->getOneOrNullResult();

        return $result;
    }

    public function findBestMonth($isHazardous=false)
    {
        $sql = "SELECT month, max(cnt) maxCount FROM (
                    SELECT MONTH(date) as month, count(id) as cnt
                    FROM neo
                    WHERE is_hazardous=:isHazardous
                    GROUP BY MONTH(date)
                ) m
                GROUP BY month";

        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('month', 'month');
        $rsm->addScalarResult('maxCount', 'maxCount');

        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);

        $result = $query
            ->setParameter('isHazardous', $isHazardous)
            ->getOneOrNullResult();

        return $result;
    }
}
